//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BrokerageAccountOpenLot = newBrokerageAccountOpenLotTable("public", "brokerage_account_open_lot", "")

type brokerageAccountOpenLotTable struct {
	postgres.Table

	//Columns
	BrokerageAccountOpenLotID postgres.ColumnString
	BrokerageAccountID        postgres.ColumnString
	SymbolOrCusip             postgres.ColumnString
	LotCreationDate           postgres.ColumnTimestampz
	CreatedAt                 postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BrokerageAccountOpenLotTable struct {
	brokerageAccountOpenLotTable

	EXCLUDED brokerageAccountOpenLotTable
}

// AS creates new BrokerageAccountOpenLotTable with assigned alias
func (a BrokerageAccountOpenLotTable) AS(alias string) *BrokerageAccountOpenLotTable {
	return newBrokerageAccountOpenLotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BrokerageAccountOpenLotTable with assigned schema name
func (a BrokerageAccountOpenLotTable) FromSchema(schemaName string) *BrokerageAccountOpenLotTable {
	return newBrokerageAccountOpenLotTable(schemaName, a.TableName(), a.Alias())
}

func newBrokerageAccountOpenLotTable(schemaName, tableName, alias string) *BrokerageAccountOpenLotTable {
	return &BrokerageAccountOpenLotTable{
		brokerageAccountOpenLotTable: newBrokerageAccountOpenLotTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newBrokerageAccountOpenLotTableImpl("", "excluded", ""),
	}
}

func newBrokerageAccountOpenLotTableImpl(schemaName, tableName, alias string) brokerageAccountOpenLotTable {
	var (
		BrokerageAccountOpenLotIDColumn = postgres.StringColumn("brokerage_account_open_lot_id")
		BrokerageAccountIDColumn        = postgres.StringColumn("brokerage_account_id")
		SymbolOrCusipColumn             = postgres.StringColumn("symbol_or_cusip")
		LotCreationDateColumn           = postgres.TimestampzColumn("lot_creation_date")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		allColumns                      = postgres.ColumnList{BrokerageAccountOpenLotIDColumn, BrokerageAccountIDColumn, SymbolOrCusipColumn, LotCreationDateColumn, CreatedAtColumn}
		mutableColumns                  = postgres.ColumnList{BrokerageAccountIDColumn, SymbolOrCusipColumn, LotCreationDateColumn, CreatedAtColumn}
	)

	return brokerageAccountOpenLotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BrokerageAccountOpenLotID: BrokerageAccountOpenLotIDColumn,
		BrokerageAccountID:        BrokerageAccountIDColumn,
		SymbolOrCusip:             SymbolOrCusipColumn,
		LotCreationDate:           LotCreationDateColumn,
		CreatedAt:                 CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
