//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BankAccountTransaction = newBankAccountTransactionTable("public", "bank_account_transaction", "")

type bankAccountTransactionTable struct {
	postgres.Table

	//Columns
	BankAccountTransactionID postgres.ColumnString
	ExternalTransactionID    postgres.ColumnString
	ImportRunID              postgres.ColumnString
	Amount                   postgres.ColumnFloat
	Category                 postgres.ColumnString
	NewBalance               postgres.ColumnFloat
	Description              postgres.ColumnString
	TransactionDate          postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BankAccountTransactionTable struct {
	bankAccountTransactionTable

	EXCLUDED bankAccountTransactionTable
}

// AS creates new BankAccountTransactionTable with assigned alias
func (a BankAccountTransactionTable) AS(alias string) *BankAccountTransactionTable {
	return newBankAccountTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BankAccountTransactionTable with assigned schema name
func (a BankAccountTransactionTable) FromSchema(schemaName string) *BankAccountTransactionTable {
	return newBankAccountTransactionTable(schemaName, a.TableName(), a.Alias())
}

func newBankAccountTransactionTable(schemaName, tableName, alias string) *BankAccountTransactionTable {
	return &BankAccountTransactionTable{
		bankAccountTransactionTable: newBankAccountTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newBankAccountTransactionTableImpl("", "excluded", ""),
	}
}

func newBankAccountTransactionTableImpl(schemaName, tableName, alias string) bankAccountTransactionTable {
	var (
		BankAccountTransactionIDColumn = postgres.StringColumn("bank_account_transaction_id")
		ExternalTransactionIDColumn    = postgres.StringColumn("external_transaction_id")
		ImportRunIDColumn              = postgres.StringColumn("import_run_id")
		AmountColumn                   = postgres.FloatColumn("amount")
		CategoryColumn                 = postgres.StringColumn("category")
		NewBalanceColumn               = postgres.FloatColumn("new_balance")
		DescriptionColumn              = postgres.StringColumn("description")
		TransactionDateColumn          = postgres.DateColumn("transaction_date")
		allColumns                     = postgres.ColumnList{BankAccountTransactionIDColumn, ExternalTransactionIDColumn, ImportRunIDColumn, AmountColumn, CategoryColumn, NewBalanceColumn, DescriptionColumn, TransactionDateColumn}
		mutableColumns                 = postgres.ColumnList{ExternalTransactionIDColumn, ImportRunIDColumn, AmountColumn, CategoryColumn, NewBalanceColumn, DescriptionColumn, TransactionDateColumn}
	)

	return bankAccountTransactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BankAccountTransactionID: BankAccountTransactionIDColumn,
		ExternalTransactionID:    ExternalTransactionIDColumn,
		ImportRunID:              ImportRunIDColumn,
		Amount:                   AmountColumn,
		Category:                 CategoryColumn,
		NewBalance:               NewBalanceColumn,
		Description:              DescriptionColumn,
		TransactionDate:          TransactionDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
