//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UploadedFile = newUploadedFileTable("public", "uploaded_file", "")

type uploadedFileTable struct {
	postgres.Table

	//Columns
	UploadedFileID   postgres.ColumnString
	UploadedByUserID postgres.ColumnString
	FileName         postgres.ColumnString
	S3Bucket         postgres.ColumnString
	S3FilePath       postgres.ColumnString
	FileSizeKb       postgres.ColumnInteger
	CreatedAt        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UploadedFileTable struct {
	uploadedFileTable

	EXCLUDED uploadedFileTable
}

// AS creates new UploadedFileTable with assigned alias
func (a UploadedFileTable) AS(alias string) *UploadedFileTable {
	return newUploadedFileTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UploadedFileTable with assigned schema name
func (a UploadedFileTable) FromSchema(schemaName string) *UploadedFileTable {
	return newUploadedFileTable(schemaName, a.TableName(), a.Alias())
}

func newUploadedFileTable(schemaName, tableName, alias string) *UploadedFileTable {
	return &UploadedFileTable{
		uploadedFileTable: newUploadedFileTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUploadedFileTableImpl("", "excluded", ""),
	}
}

func newUploadedFileTableImpl(schemaName, tableName, alias string) uploadedFileTable {
	var (
		UploadedFileIDColumn   = postgres.StringColumn("uploaded_file_id")
		UploadedByUserIDColumn = postgres.StringColumn("uploaded_by_user_id")
		FileNameColumn         = postgres.StringColumn("file_name")
		S3BucketColumn         = postgres.StringColumn("s3_bucket")
		S3FilePathColumn       = postgres.StringColumn("s3_file_path")
		FileSizeKbColumn       = postgres.IntegerColumn("file_size_kb")
		CreatedAtColumn        = postgres.TimestampColumn("created_at")
		allColumns             = postgres.ColumnList{UploadedFileIDColumn, UploadedByUserIDColumn, FileNameColumn, S3BucketColumn, S3FilePathColumn, FileSizeKbColumn, CreatedAtColumn}
		mutableColumns         = postgres.ColumnList{UploadedByUserIDColumn, FileNameColumn, S3BucketColumn, S3FilePathColumn, FileSizeKbColumn, CreatedAtColumn}
	)

	return uploadedFileTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UploadedFileID:   UploadedFileIDColumn,
		UploadedByUserID: UploadedByUserIDColumn,
		FileName:         FileNameColumn,
		S3Bucket:         S3BucketColumn,
		S3FilePath:       S3FilePathColumn,
		FileSizeKb:       FileSizeKbColumn,
		CreatedAt:        CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
