//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BrokerageAccountTransaction = newBrokerageAccountTransactionTable("public", "brokerage_account_transaction", "")

type brokerageAccountTransactionTable struct {
	postgres.Table

	//Columns
	BrokerageAccountTransactionID postgres.ColumnString
	ExternalTransactionID         postgres.ColumnString
	ImportRunID                   postgres.ColumnString
	SymbolOrCusip                 postgres.ColumnString
	Price                         postgres.ColumnFloat
	Quantity                      postgres.ColumnFloat
	Amount                        postgres.ColumnFloat
	Side                          postgres.ColumnString
	TransactionDate               postgres.ColumnTimestampz
	Description                   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BrokerageAccountTransactionTable struct {
	brokerageAccountTransactionTable

	EXCLUDED brokerageAccountTransactionTable
}

// AS creates new BrokerageAccountTransactionTable with assigned alias
func (a BrokerageAccountTransactionTable) AS(alias string) *BrokerageAccountTransactionTable {
	return newBrokerageAccountTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BrokerageAccountTransactionTable with assigned schema name
func (a BrokerageAccountTransactionTable) FromSchema(schemaName string) *BrokerageAccountTransactionTable {
	return newBrokerageAccountTransactionTable(schemaName, a.TableName(), a.Alias())
}

func newBrokerageAccountTransactionTable(schemaName, tableName, alias string) *BrokerageAccountTransactionTable {
	return &BrokerageAccountTransactionTable{
		brokerageAccountTransactionTable: newBrokerageAccountTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:                         newBrokerageAccountTransactionTableImpl("", "excluded", ""),
	}
}

func newBrokerageAccountTransactionTableImpl(schemaName, tableName, alias string) brokerageAccountTransactionTable {
	var (
		BrokerageAccountTransactionIDColumn = postgres.StringColumn("brokerage_account_transaction_id")
		ExternalTransactionIDColumn         = postgres.StringColumn("external_transaction_id")
		ImportRunIDColumn                   = postgres.StringColumn("import_run_id")
		SymbolOrCusipColumn                 = postgres.StringColumn("symbol_or_cusip")
		PriceColumn                         = postgres.FloatColumn("price")
		QuantityColumn                      = postgres.FloatColumn("quantity")
		AmountColumn                        = postgres.FloatColumn("amount")
		SideColumn                          = postgres.StringColumn("side")
		TransactionDateColumn               = postgres.TimestampzColumn("transaction_date")
		DescriptionColumn                   = postgres.StringColumn("description")
		allColumns                          = postgres.ColumnList{BrokerageAccountTransactionIDColumn, ExternalTransactionIDColumn, ImportRunIDColumn, SymbolOrCusipColumn, PriceColumn, QuantityColumn, AmountColumn, SideColumn, TransactionDateColumn, DescriptionColumn}
		mutableColumns                      = postgres.ColumnList{ExternalTransactionIDColumn, ImportRunIDColumn, SymbolOrCusipColumn, PriceColumn, QuantityColumn, AmountColumn, SideColumn, TransactionDateColumn, DescriptionColumn}
	)

	return brokerageAccountTransactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BrokerageAccountTransactionID: BrokerageAccountTransactionIDColumn,
		ExternalTransactionID:         ExternalTransactionIDColumn,
		ImportRunID:                   ImportRunIDColumn,
		SymbolOrCusip:                 SymbolOrCusipColumn,
		Price:                         PriceColumn,
		Quantity:                      QuantityColumn,
		Amount:                        AmountColumn,
		Side:                          SideColumn,
		TransactionDate:               TransactionDateColumn,
		Description:                   DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
